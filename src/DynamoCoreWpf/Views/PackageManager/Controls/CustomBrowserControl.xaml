<UserControl x:Class="Dynamo.PackageManager.UI.CustomBrowserControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:local="clr-namespace:Dynamo.PackageManager.UI"
             xmlns:ui="clr-namespace:Dynamo.UI"
             xmlns:p="clr-namespace:Dynamo.Wpf.Properties"
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="800">
    <UserControl.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ui:SharedResourceDictionary Source="{x:Static ui:SharedDictionaryManager.DynamoModernDictionaryUri}" />
                <ui:SharedResourceDictionary Source="{x:Static ui:SharedDictionaryManager.DynamoConvertersDictionaryUri}" />
                <ui:SharedResourceDictionary Source="{x:Static ui:SharedDictionaryManager.DynamoColorsAndBrushesDictionaryUri}" />
            </ResourceDictionary.MergedDictionaries>

            <!--#region BRUSHES-->
            <SolidColorBrush x:Key="TreeViewItem.TreeArrow.Static.Stroke" Color="Transparent"/>
            <SolidColorBrush x:Key="TreeViewItem.TreeArrow.Static.Fill" Color="#DCDCDC"/>
            <SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Stroke" Color="Transparent"/>
            <SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Fill" Color="#FFCCEEFB"/>
            <SolidColorBrush x:Key="TreeViewItem.TreeArrow.Static.Checked.Stroke" Color="Transparent"/>
            <SolidColorBrush x:Key="TreeViewItem.TreeArrow.Static.Checked.Fill" Color="#DCDCDC"/>
            <SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Checked.Stroke" Color="Transparent"/>
            <SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Checked.Fill" Color="#FF82DFFB"/>
            <SolidColorBrush x:Key="StrokeBrush" Color="#696969" />
            <SolidColorBrush x:Key="ListBorder" Color="#828790"/>
            <PathGeometry x:Key="TreeArrow" Figures="M 0 0 L 0 7.2 L 4.8 3.6 Z"/>
            <!--#endregion-->


            <!--Folder toggle-->
            
            <!-- MOVED TO RESOURCE DICTIONARY
            This handles the expand/collapse functionality of the TreeView.
            The ComtrolTemplate inside defines how the ToggleButton looks and behaves.
            The template included a Border and a Canvas containing a Path element that represents an arrow.
            The Triggers define visual changes when the ToggleButton interacts with:
            - IsChecked
            - IsMouseOver
            - MultiTrigger: changes the arrow's color when both IsChecked and IsMouseOver are true
            In normal state the ToggleButton is shown with an arrow pointing in the default direction (right).
            In checked state (when clicking on it) the arrow rotates 90 degrees and the fill and stroke color change.
            ...also the node is expanded, showing its children.
            In MouseOver state, the fill and stroke color change.
            In Combined state (IsCheched = true, IsMouseOver = true) a specific set of color and stroke are applied.

            Each node in the ToggleButton is styled by a "FolderToggleStyle". Clicking the TOggleButton expands or collapses the folder
            showing or hiding its sub-folders and files.
            
            Customizes the ToggleButton  that is within the TreeViewItem to expand and collapse nodes (folders).
            The ToggleButton is typically placed next to each item in the TreeView to indicate whether the node can be expanded or collapsed.
            -->
            <Style x:Key="FolderToggleStyle" TargetType="{x:Type ToggleButton}">
                <Setter Property="Focusable" Value="False"/>
                <Setter Property="Width" Value="16"/>
                <Setter Property="Height" Value="16"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                            <Border Background="Transparent" Height="16" Padding="7 5 0 0" Width="16">
                                <Canvas>
                                    <Path x:Name="ExpandPath" Data="{StaticResource TreeArrow}" Fill="{StaticResource TreeViewItem.TreeArrow.Static.Fill}" Stroke="{StaticResource TreeViewItem.TreeArrow.Static.Stroke}">
                                        <Path.RenderTransform>
                                            <RotateTransform Angle="0" CenterY="3" CenterX="3"/>
                                        </Path.RenderTransform>
                                    </Path>
                                </Canvas>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsChecked" Value="True">
                                    <Setter Property="RenderTransform" TargetName="ExpandPath">
                                        <Setter.Value>
                                            <RotateTransform Angle="90" CenterY="4" CenterX="2"/>
                                        </Setter.Value>
                                    </Setter>
                                    <Setter Property="Fill" TargetName="ExpandPath" Value="{StaticResource TreeViewItem.TreeArrow.Static.Checked.Fill}"/>
                                    <Setter Property="Stroke" TargetName="ExpandPath" Value="{StaticResource TreeViewItem.TreeArrow.Static.Checked.Stroke}"/>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Stroke" TargetName="ExpandPath" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Stroke}"/>
                                    <Setter Property="Fill" TargetName="ExpandPath" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Fill}"/>
                                </Trigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsMouseOver" Value="True"/>
                                        <Condition Property="IsChecked" Value="True"/>
                                    </MultiTrigger.Conditions>
                                    <Setter Property="Stroke" TargetName="ExpandPath" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Checked.Stroke}"/>
                                    <Setter Property="Fill" TargetName="ExpandPath" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Checked.Fill}"/>
                                </MultiTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
        
           <!--Tree view style-->
            

            <!-- MOVED TO RESOURCE DICTIONARY
            The purpose of this style is to modify the appearance and behavior of the TreeView control.
            ControlTemplate sets up the Border and Scroller. It specifies how the ViewTree should be rendered.
            Trigger for IsEnables changes the background color of the border when the TreeView is disabled.
            Trigger for the IsVisualizing enables scrolling in the ScrollViewwer when visualization is active.
            It also sets the ItemPanel to use a VistualizingStackPanel when visualization is enabled. This improves
            performance by only creating UI elements for items currently in view.
            In conclusion, this Style customizes the appearance an behavior of the TreeView control by:
            - setting default values for properties such as background and border
            - defining a ControlTemplate that specifies the visual structure of the TreeView, including a ScrollViewer.
            - using triggers to change the appearance when the TreeView is disabled or when visualization is enabled.
            This style customizes the overall appearance of the and behavior of the TreeView.
            !!!-->
            <Style x:Key="TreeViewStyle" TargetType="{x:Type TreeView}">
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="BorderBrush" Value="{StaticResource ListBorder}"/>
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="Padding" Value="1"/>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
                <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
                <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
                <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>
                <Setter Property="UseLayoutRounding" Value="True"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type TreeView}">
                            <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
                                <ScrollViewer x:Name="_tv_scrollviewer_" Background="{TemplateBinding Background}" CanContentScroll="false" Focusable="false" HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}">
                                    <ItemsPresenter/>
                                </ScrollViewer>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Background" TargetName="Bd" Value="#343434"/>
                                </Trigger>
                                <Trigger Property="VirtualizingPanel.IsVirtualizing" Value="true">
                                    <Setter Property="CanContentScroll" TargetName="_tv_scrollviewer_" Value="true"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <Trigger Property="VirtualizingPanel.IsVirtualizing" Value="true">
                        <Setter Property="ItemsPanel">
                            <Setter.Value>
                                <ItemsPanelTemplate>
                                    <VirtualizingStackPanel/>
                                </ItemsPanelTemplate>
                            </Setter.Value>
                        </Setter>
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter Property="Background" Value="#343434"/>
                    </Trigger>
                </Style.Triggers>   
            </Style>

            <!--#region CheckBox -->   
            <!--
            This CheckBox Style customizes the appearance of the focus visual control. This focus visual is a indicator that shows which
            control currently has keyboard focus. It typically appears as a dotted rectangle around the control.
            -->
            
            <Style x:Key="FocusVisual">
                <Setter Property="Control.Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <Rectangle Margin="2" StrokeDashArray="1 2" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" SnapsToDevicePixels="true" StrokeThickness="1"/>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!--
            This Style customizes the appearance of the focus visual control. Similarly to the one above.
            It is specially designed to create a visual indicator for when a control has keyboard focus, but this includes different
            margin settings to position the visual indicator.
            -->

            <Style x:Key="OptionMarkFocusVisual">
                <Setter Property="Control.Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <Rectangle Margin="14,0,0,0" StrokeDashArray="1 2" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" SnapsToDevicePixels="true" StrokeThickness="1"/>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            
            <SolidColorBrush x:Key="OptionMark.Static.Background" Color="#FFFFFFFF"/>
            <SolidColorBrush x:Key="OptionMark.Static.Border" Color="#FF707070"/>
            <SolidColorBrush x:Key="OptionMark.Static.Glyph" Color="#FF212121"/>
            <SolidColorBrush x:Key="OptionMark.MouseOver.Background" Color="#FFF3F9FF"/>
            <SolidColorBrush x:Key="OptionMark.MouseOver.Border" Color="#FF5593FF"/>
            <SolidColorBrush x:Key="OptionMark.MouseOver.Glyph" Color="#FF212121"/>
            <SolidColorBrush x:Key="OptionMark.Pressed.Background" Color="#FFD9ECFF"/>
            <SolidColorBrush x:Key="OptionMark.Pressed.Border" Color="#FF3C77DD"/>
            <SolidColorBrush x:Key="OptionMark.Pressed.Glyph" Color="#FF212121"/>
            <SolidColorBrush x:Key="OptionMark.Disabled.Background" Color="#FFE6E6E6"/>
            <SolidColorBrush x:Key="OptionMark.Disabled.Border" Color="#FFBCBCBC"/>
            <SolidColorBrush x:Key="OptionMark.Disabled.Glyph" Color="#FF707070"/>

            <!-- MOVED TO RESOURCE DICTIONARY
            This Style customizes the appearance of the CheckBox controls.
            The ControlTemplate inside it defines how the check box should be visually structured, including the box,
            check mark, and any associated content. Triggers with the template respond to state changes and adjust the visual elements
            accordingly to provide a dynamic and responsive user experience.
            -->

            <Style x:Key="CheckBoxStyle" TargetType="{x:Type CheckBox}">
                <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
                <Setter Property="Background" Value="{StaticResource OptionMark.Static.Background}"/>
                <Setter Property="BorderBrush" Value="{StaticResource OptionMark.Static.Border}"/>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type CheckBox}">
                            <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>
                                <Border x:Name="checkBoxBorder" Width="12" Height="12" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="0" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                    <Grid x:Name="markGrid">
                                        <Path x:Name="optionMark" Data="M 0.387 4.6521 L 1.6793 3.3598 L 3.2327 4.6984 L 6.5682 1.0353 L 7.9158 2.2623 L 3.3863 7.2367 L 0.387 4.6521 Z" Fill="{StaticResource OptionMark.Static.Glyph}" Margin="1" Opacity="0" Stretch="None"/>
                                        <Rectangle x:Name="indeterminateMark" Fill="{StaticResource OptionMark.Static.Glyph}" Margin="2" Opacity="0"/>
                                    </Grid>
                                </Border>
                                <ContentPresenter x:Name="contentPresenter" Grid.Column="1" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="HasContent" Value="true">
                                    <Setter Property="FocusVisualStyle" Value="{StaticResource OptionMarkFocusVisual}"/>
                                    <Setter Property="Padding" Value="4,-1,0,0"/>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="true">
                                    <Setter Property="Background" TargetName="checkBoxBorder" Value="{StaticResource OptionMark.MouseOver.Background}"/>
                                    <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{StaticResource OptionMark.MouseOver.Border}"/>
                                    <Setter Property="Fill" TargetName="optionMark" Value="{StaticResource OptionMark.MouseOver.Glyph}"/>
                                    <Setter Property="Fill" TargetName="indeterminateMark" Value="{StaticResource OptionMark.MouseOver.Glyph}"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Background" TargetName="checkBoxBorder" Value="{StaticResource OptionMark.Disabled.Background}"/>
                                    <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{StaticResource OptionMark.Disabled.Border}"/>
                                    <Setter Property="Fill" TargetName="optionMark" Value="{StaticResource OptionMark.Disabled.Glyph}"/>
                                    <Setter Property="Fill" TargetName="indeterminateMark" Value="{StaticResource OptionMark.Disabled.Glyph}"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="true">
                                    <Setter Property="Background" TargetName="checkBoxBorder" Value="{StaticResource OptionMark.Pressed.Background}"/>
                                    <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{StaticResource OptionMark.Pressed.Border}"/>
                                    <Setter Property="Fill" TargetName="optionMark" Value="{StaticResource OptionMark.Pressed.Glyph}"/>
                                    <Setter Property="Fill" TargetName="indeterminateMark" Value="{StaticResource OptionMark.Pressed.Glyph}"/>
                                </Trigger>
                                <Trigger Property="IsChecked" Value="true">
                                    <Setter Property="Opacity" TargetName="optionMark" Value="1"/>
                                    <Setter Property="Opacity" TargetName="indeterminateMark" Value="0"/>
                                    <Setter Property="Visibility" Value="Visible"/>
                                </Trigger>
                                <Trigger Property="IsChecked" Value="{x:Null}">
                                    <Setter Property="Opacity" TargetName="optionMark" Value="0"/>
                                    <Setter Property="Opacity" TargetName="indeterminateMark" Value="1"/>
                                    <Setter Property="Visibility" Value="Hidden"/>
                                </Trigger>
                                <Trigger Property="IsChecked" Value="False">
                                    <Setter Property="Visibility" Value="Hidden"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <!--#endregion-->

            <!--#region CONVERTERS-->
            <!--https://stackoverflow.com/questions/61217523/wpf-treeview-how-to-make-controls-align-relative-to-every-treeviewitem-yet-sti-->
            <local:IndentConverter x:Key="IndentConverter" />
            <local:HasChildrenToVisibilityConverter x:Key="HasChildrenToVisibilityConverter" />
            <local:DependencyTypeToVisibilityConverter x:Key="DependencyTypeToVisibilityConverter" />
            <local:SortingConverter x:Key="SortingConverter" />
            <local:ChildrenItemsContainsFolderToVisibilityConverter x:Key="ChildrenItemsContainsFolderToVisibilityConverter" />
            <!--#endregion-->

            <!-- MOVED TO RESOURCE DICTIONARY
            This Template customizes the appearance and behavior of items within the TreeView control.
            This template contains the Vertical Dash Line and Indentation, Horizontal Dash Line and the Arrow Expander!
            ContlorPresenter displays the header content of the TreeViewItem such as the folder of the file name. It is tryled
            an positioned within a Border.
            This template also contains the Remove Button!
            ItemsPresenter displays the child items of the TreeViewItem. The indentation is dynamically set to create a hierarchical view.
    
            Both this template and FolderToggleStyle relate to the appearance and behavior of TreeViewItem controls,
            but they do so in different ways for different aspects of the TreeViewItem.
            Application: FolderToggleStyle is applied to the ToggleButton named Expander within this template! The template is applied to the
            entire TreeViewItem, setting up the structure and visual behavior for the item incorporating ToogleButton styles by FolderToggleStyle.
            Key Element: FolderToggleStyle defines the size, focusability, and visual elements (like arrow) of the ToggleButton including its
            rotation when expanded or collapsed. This template defines a grid layout with columns and rows, includes a Border for selection indication,
            a ToggleButton for expanding/collapsing and s ContentPresenter for displaying the items content.
            How they work together: the FolderToggleStyle is used with the TreeViewItemControlTemplate1 to provide a consistent and styled collapse/expand
            button for each TreeViewItem.
            -->
            <ControlTemplate x:Key="TreeViewItemControlTemplate1" TargetType="{x:Type TreeViewItem}">
                <Grid x:Name="tvGrid">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition MinWidth="19" Width="Auto"/>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="24"/>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="30"/>
                        <RowDefinition/>
                    </Grid.RowDefinitions>
                
                    <!-- Selection border -->
                    <Border Grid.ColumnSpan="5" Grid.Column="0" x:Name="SelectionBorder" Background="Transparent" Opacity="0.1"/>

                    <!-- Vertical dash line and sets the indent -->
                    <Border Grid.Column="0" Grid.RowSpan="2" VerticalAlignment="Stretch"
                            Width="{Binding Path=(local:TreeViewItemHelper.Indent).Value, Mode=OneWay, RelativeSource={RelativeSource AncestorType=ItemsPresenter}}">
                        <Rectangle Width="1" Height="Auto" Stroke="{StaticResource StrokeBrush}"
                                   HorizontalAlignment="Right"
                                   VerticalAlignment="Stretch"
                                   StrokeDashArray="1,2.3"
                                   StrokeThickness="3"
                                   UseLayoutRounding="True"
                                   SnapsToDevicePixels="True"
                                   Margin="0 -8 0 14"
                                   x:Name="VerticalMarker">
                        </Rectangle>
                    </Border>
                    
                    <!-- Horizontal dash line -->
                    <Border Grid.Column="1">
                        <Rectangle Width="18" Height="1"                                        
                                   StrokeDashArray="1,3,1,2"
                                   StrokeThickness="3" Stroke="{StaticResource StrokeBrush}" HorizontalAlignment="Left" VerticalAlignment="Center" 
                                   Margin="-1 3 0 0"
                                   Visibility="Visible"
                                   x:Name="HorizontalMarker"/>
                    </Border>
                    
                    <!-- Arrow expander -->
                    <ToggleButton x:Name="Expander"
                                  Grid.Column="2"
                                  Margin="-15 0 0 0"
                                  ClickMode="Press"
                                  IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                                  Style="{StaticResource FolderToggleStyle}"
                                  Visibility="{Binding ChildItems,
                                                       Converter={StaticResource ChildrenItemsContainsFolderToVisibilityConverter}}" />
                    <!-- Content presenter -->
                    <Border x:Name="Bd" 
                            Grid.Column="3"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            Padding="{TemplateBinding Padding}"
                            SnapsToDevicePixels="True">

                        <Grid>
                            <ContentPresenter x:Name="PART_Header"
                                              ContentTemplate="{TemplateBinding HeaderTemplate}" 
                                              Content="{TemplateBinding Header}" 
                                              ContentStringFormat="{TemplateBinding HeaderStringFormat}" 
                                              ContentSource="Header" 
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                              VerticalAlignment="Center"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>

                        </Grid>
                    </Border>
                
                    <!-- Garbage icon remove item button -->
                    <Grid Grid.Column="4" HorizontalAlignment="Right" Margin="0 0 8 0">
                        <Button Margin="2"
                                x:Name="RemoveButton"
                                BorderThickness="0"
                                HorizontalAlignment="Right"
                                VerticalAlignment="Center"
                                Visibility="Hidden"
                                Click="RemoveButton_Click"
                                Cursor="Hand">
                            <Button.ToolTip>
                                <ToolTip Content="{x:Static p:Resources.PublishPackageRemoveFromPacakgeTooltip}"
                                         Style="{StaticResource GenericToolTipLight}" />
                            </Button.ToolTip>
                            <Button.Template>
                                <ControlTemplate TargetType="Button">
                                    <Border Background="Transparent">
                                        <Viewbox Width="14"
                                                    Height="14"
                                                    VerticalAlignment="Center">
                                            <Path x:Name="Folder"
                                                    Fill="#999999"
                                                    Data="M5 2H2V4H14V2H11V0H5V2ZM10 2H6V1.5C6 1.22386 6.22386 1 6.5 1H9.5C9.77614 1 10 1.22386 10 1.5V2ZM13 5H3V16H13V5Z"
                                                    StrokeThickness="0">
                                            </Path>
                                        </Viewbox>
                                    </Border>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsMouseOver"
                                                    Value="True">
                                            <Setter TargetName="Folder"
                                                    Property="Fill"
                                                    Value="#6AC0E7" />
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Button.Template>
                        </Button>
                        
                    </Grid>

                    <ItemsPresenter x:Name="ItemsHost" Grid.ColumnSpan="5" Grid.Column="0" Grid.Row="1"
                                    local:TreeViewItemHelper.Indent="{Binding Path=(local:TreeViewItemHelper.Indent), Mode=OneWay, RelativeSource={RelativeSource AncestorType=ItemsPresenter}, Converter={StaticResource IndentConverter}}" />
                </Grid>
                <ControlTemplate.Triggers>
                    <Trigger Property="IsExpanded" Value="False">
                        <Setter Property="Visibility" TargetName="ItemsHost" Value="Collapsed"/>
                    </Trigger>  
                    <Trigger Property="IsSelected" Value="True">
                        <Setter Property="Background" TargetName="Bd" Value="Transparent"/>
                        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
                        <Setter Property="Visibility" TargetName="RemoveButton" Value="Visible"/>
                        <Setter Property="Background" TargetName="SelectionBorder" Value="#F5F5F5"/>
                    </Trigger>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="local:MyTreeViewHelper.IsMouseDirectlyOverItem" Value="True"/>
                        </MultiTrigger.Conditions>
                        <Setter Property="Visibility" TargetName="RemoveButton" Value="Visible"/>
                        <Setter Property="Background" TargetName="SelectionBorder" Value="#F5F5F5"/>
                    </MultiTrigger>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        <Setter Property="Visibility" TargetName="RemoveButton" Value="Hidden"/>
                        <Setter Property="Background" TargetName="Bd" Value="#343434"/>
                        <Setter Property="Background" TargetName="SelectionBorder" Value="#343434"/>
                    </Trigger>
                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=UserControl}, Path=DisableRemove}" Value="True">
                        <Setter Property="Visibility" TargetName="RemoveButton" Value="Hidden"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=UserControl}, Path=Tag}" Value="True">
                        <Setter Property="Visibility" TargetName="RemoveButton" Value="Hidden"/>
                    </DataTrigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>

            <!-- MOVED TO RESOURCE DICTIONARY
            This Style customizes properties of the TreeViewItem such as it's template, expansion state, font size and foreground color.
            It also included triggers to change the items' properties based on specific conditions.
            Template: sets the control template of the TreeViewItem to TreeViewItemControlTemplate1
            IsExpanded: ensures that the TreeViewItem is expanded by default.
            FontSize: Sets the font size to 12
            Foreground: sets it to light gray

            Data Triggers: binds the DependencyType property of the data context and uses converter to determine the visibility
            based on the converter parameter (Folder). Also, when the converter returns Collapsed, the Visibility property of the
            TreeviewItem is set to Collapsed, effectively hiding the item.
            
            This Style and FolderToggleStyle work together to define the overall appearance and behavior of TreeViewItem controls.
            This style applies to the TreeViewItems as a whole. This meant that the TreeViewItems will use the TreeViewItemControlTemplate1 to
            define its structure and appearance.
            TreeViewItemControlTemplate1 defines the layout of the TreeVireItem, including the ToggleButton that handles expanding and collapsing the item.
            FolderToggleStyle specifically defines the appearance and behavior of the ToggleButtin that is used to expand and collapse the nodes.
            
            How they work together:
            - CustomTreeViewItem Style is applied to the entire TreeViewItem and sets the TreeViewItemControlTemplate1 as it's template.
            - TreeViewItemControlTemplate1 defines the layout of the TreeViewItem, including placing the ToggleButton for expanding/collapsing nodes.
            - FolderToggleStyle is specifically applied to the ToggleButton. It defines the appearance and behavior of the ToggleButton, including the visual
            changes when it is checked (expanded) or unchecked (collapsed).

            Summary:
            - The CustomTreeViewItem sets up the general appearance and behavior of the TreViewItem
            - The TreeViewItemControlTemplate1  defines the structure, including where the expand/collapse button is placed.
            - The FolderToggleStyle  specifically styles the expand /collapse button (the ToggleButton)
            -->
            <Style TargetType="TreeViewItem" x:Key="CustomTreeViewItem">
                <Setter Property="Template" Value="{DynamicResource TreeViewItemControlTemplate1}" />
                <Setter Property="IsExpanded" Value="True" />
                <Setter Property="FontSize" Value="12"/>    
                <Setter Property="Foreground" Value="#F5F5F5"/>
                <Style.Triggers>
                    <DataTrigger Binding="{Binding DependencyType, Converter={StaticResource DependencyTypeToVisibilityConverter}, ConverterParameter=Folder}"
                                 Value="Collapsed">
                        <Setter Property="Visibility" Value="Collapsed" />
                    </DataTrigger>                    
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter Property="Foreground" Value="#F5F5F5"/>
                        <Setter Property="IsSelected" Value="False"/>
                    </Trigger>
                </Style.Triggers>
            </Style>
            
        </ResourceDictionary>
    </UserControl.Resources>
    <Grid>
        <!--Folders-->
        <TreeView Style="{DynamicResource TreeViewStyle}"
                  x:Name="customTreeView"
                  Margin="0"
                  SelectedItemChanged="customTreeView_SelectedItemChanged"
                  ItemContainerStyle="{StaticResource CustomTreeViewItem}"
                  ItemsSource="{Binding RelativeSource={RelativeSource AncestorType=UserControl}, Path=Root, Mode=OneWay}">
            <TreeView.ItemTemplate>
                <HierarchicalDataTemplate DataType="{x:Type local:PackageItemRootViewModel}"
                                          ItemsSource="{Binding ChildItems,
                                                                Converter={StaticResource SortingConverter},
                                                                ConverterParameter=DisplayName}">
                    <TextBlock Text="{Binding DisplayName}"
                               FontSize="14"
                               SnapsToDevicePixels="True"
                               UseLayoutRounding="True"
                               TextTrimming="CharacterEllipsis"
                               MaxWidth="180"
                               FontFamily="{StaticResource ArtifaktElementRegular}"/>
                </HierarchicalDataTemplate>
            </TreeView.ItemTemplate>
        </TreeView>
    </Grid>
</UserControl>
